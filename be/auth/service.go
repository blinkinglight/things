// Code generated by go generate; DO NOT EDIT.
package auth

import (
	"context"
	"github.com/blinkinglight/thingsbe/shared"
	"encoding/json"
	"log"

	"github.com/nats-io/nats.go/micro"
)

func init() {
	shared.RegisterService(shared.Service{
		Subject: "svc.auth",
		Fn:      RunWithConfig,
	})
}

func RunWithConfig(ctx context.Context, cfg shared.Config) {
	nc, err := shared.NewNATS()
	if err != nil {
		panic(err)
	}
	_ = nc

	// request handler
	serviceHandler := func(req micro.Request) {
		log.Printf("%s got message", "svc.auth")
		var payload shared.CommandPayload
		err := json.Unmarshal(req.Data(), &payload)
		if err != nil {
			req.Error("503", "Internal error", []byte(err.Error()))
			return
		}

		var responsePayload shared.CommandPayload
		responsePayload.Subject = "fe.show-logout"
		responsePayload.Payload = "{}"
		responsePayload.Success = 1
		rb, _ := responsePayload.Marshal()
		req.Respond(rb)
	}

	srv, err := micro.AddService(nc.Conn(), micro.Config{
		Name:    "AuthService",
		Version: "1.0.0",
		Endpoint: &micro.EndpointConfig{
			Subject: "svc.auth",
			Handler: micro.HandlerFunc(serviceHandler),
		},
	})
	defer srv.Stop()

	log.Printf("service started: %s", srv.Info().Name)

	for {
		select {
		case <-ctx.Done():
			return
		}
	}
}
